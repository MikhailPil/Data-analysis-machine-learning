# -*- coding: utf-8 -*-
"""DZ1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Rw3F6YpyKVQz0X3ZUHjcpWyC7Yj6NU9q

Используя цикл for:
  Скачать 100 вакансий ( регион-Москва, название вакансии - Аналитик), поля name и salary в два отдельных списка (list)
"""

import requests


salary1 = []
name1 = []

url="https://api.hh.ru/vacancies?text=Аналитик&area=1&search_field=name&per_page=100&page=1".format(str())
items = requests.get(url).json()['items']

for item in items:
	if item['salary'] is not None:
		salary1 += [item['salary']]    
	if item['name'] is not None:
			name1 += [item['name']]


print(f'Зарплаты: {salary1}')
print(f'Поле Salary: {name1}')

"""Используя цикл while:
  Скачать 100 вакансий (регион-Санкт-Петербург, название вакансии - Аналитик), поля name и salary   в два отдельных списка (list)

"""

salary2 = []
name2 = []
i = 0
url="https://api.hh.ru/vacancies?text=Аналитик&area=2&search_field=name&per_page=100&page=1".format(str())
items = requests.get(url).json()['items']
while i !=100:
  if items[i]['salary'] is not None:
    salary2 += [items[i]['salary']] 
  if items[i]['name'] is not None:    
    name2 += [items[i]['name']]
  i += 1
 
print(f'Зарплаты: {salary2}')
print(f'Поле Salary: {name2}')

"""Используя любой из видов цикла - создать список названий вакансий, больших по зп в Санкт-Петербурге чем, в Москве. Для оценки зарплаты брать нижнюю границу (from), очищенную от налога (-13%), и пересчитанную с учетом курса валют в рубли. 

Вывести длину списка, и самую высокоплачиваемую вакансию, с указанием названия и зп, из него, используя команду print

Импорт данных
"""

import requests


def one_vac(x):
	one_vac = []
	if x['salary'] is not None and x['salary']['from'] is not None:
		one_vac = { 'currency': x['salary']['currency']}	
		one_vac['id'] = x['id']	
		one_vac['name'] = x['name']
		if x['salary']['gross'] is True:
			one_vac['from'] = x['salary']['from']
		else:
			one_vac['from'] = x['salary']['from'] * 0.87 
	return one_vac


def vac(k):
	vacancies = []
	for i in range(20):
		url="https://api.hh.ru/vacancies?area={0}&search_field=name&only_with_salary=True&per_page=100&page={1}".format(str(k), str(i))
		items = requests.get(url).json()['items']
		for item in items:
			vacancies += [one_vac(item)]
	return vacancies


Spb_vac = vac(2)
Msc_vac = vac(1)

"""Конвертация валют + удаление пустых

"""

def conversion(list):
  i = 0
  tmp_list = [vac.copy() for vac in list]
  for vac in tmp_list:
    if 'currency' and 'from' in vac:
      i += 1 
      if vac['currency'] == 'USD':
        vac['from'] *= 60
      elif vac['currency'] == 'EUR':
        vac['from'] *= 61
      elif vac['currency'] == 'KZT':
        vac['from'] *= 0.13 

    else:
      del tmp_list[i]	
      i += 1	
  return tmp_list      		
Spb_conv = conversion(Spb_vac)
Msc_conv = conversion(Msc_vac)

"""Одинаковые названия в список для каждого города"""

Msc_common = []
Spb_common = []
max_sal = []
for p in Spb_conv:
  for m in Msc_conv:
    if 'name' in p and 'name' in m:
      if p['name'] == m['name']:
        Spb_common += [p]
        Msc_common +=[m]
        
#for i in Msc_common: print(i)

"""Для каждого города оставляем только одно совпадающее название, которое имеет наибольшую зп """

def only_one(list):
  tmp_list = []
  for i in range (len(list)):
    if any(list[i]['name'] in one['name'] for one in tmp_list) == False:
      tmp = list[i] 
      #print(f'tmp[i]: {tmp}')
    else:  
      continue
    for j in range (i + 1, len(list)):
      if tmp['name'] == list[j]['name'] and list[j]['from'] > tmp['from']:  
        tmp = list[j]
        #print(f'new tmp: {tmp}')
      else:
        continue
    tmp_list += [tmp]
    #print(f'tmp in list: {tmp}')
  return tmp_list


Msc1 = only_one(Msc_common)
Spb1 = only_one(Spb_common)
#for i in Msc1: print(i)

"""Вакансии Питера, по зп большие, чем в Мск + длина этого списка"""

more_sal = []
for p in Spb1:
  for m in Msc1:
    if p['name'] == m['name'] and p['from'] > m['from']:
      more_sal += [p]
         
print(f'Длина списка: {len(more_sal)}')

the_most = more_sal[0]
for i in more_sal:
  if i['from'] > the_most['from']:
    the_most = i
print(the_most['name'])
print(the_most['from'])